/// Get a color from the $colors variable found in the _settings.scss file.
/// Color variants can be given when set in the $colors variable.
///
/// @function  color-get
/// @prop      {Color}
/// @prop      {Boolean}
/// @return    {Color}
@function color-get($color, $variant: false) {

    // When a variant is given and the variant can be found in
    // the $colors map then we'll try to retreive that color.
    @if $variant and type-of(map-get($colors, $color)) == map {
        @return map-get(color-get($color), $variant);
    }

    // If the color is found in the $colors map or in
    // the varient colors map then we'll return it.
    @if map-has-key($colors, $color) {
        @return map-get($colors, $color);
    }

    // Error or when no color is given.
    @error "Unknown color `#{$color}`!";
    @return null;
}

/// Create a map of available colors.
///
/// @function  color-palette
/// @prop      {String}  $separator
/// @return    {Map}
@function color-palette($separator: '-') {
    $palette: ();

    @each $name, $color in $colors {

        // If the color is a map, then we need to loop over it
        // before adding it to our palette of colors.
        @if type-of($color) == map {
            @each $map-name, $map-color in $color {
                $palette: map-merge($palette, ("#{$name}#{$separator}#{$map-name}": $map-color));
            }
        } @else {
            $palette: map-merge($palette, ($name: $color));
        }
    }

    @return $palette;
}